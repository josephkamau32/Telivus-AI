import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Download, Home, AlertTriangle, Clock, User } from 'lucide-react';

interface MedicalReportProps {
  report: string;
  userInfo: {
    feelings: string;
    symptoms: string[];
    age: number;
  };
  timestamp: string;
  onBackToHome: () => void;
}

export const MedicalReport = ({ report, userInfo, timestamp, onBackToHome }: MedicalReportProps) => {
  const [isDownloading, setIsDownloading] = useState(false);

  const handleDownload = async () => {
    setIsDownloading(true);
    
    const reportContent = `
MEDISENSE AI - HEALTH ASSESSMENT REPORT
Generated on: ${new Date(timestamp).toLocaleString()}

PATIENT INFORMATION:
- Age: ${userInfo.age} years
- Current feeling: ${userInfo.feelings}
- Symptoms: ${userInfo.symptoms.join(', ')}

AI ASSESSMENT:
${report}

IMPORTANT DISCLAIMER:
MediSense AI is not a substitute for professional medical advice. Please consult a licensed healthcare provider for diagnosis and treatment.

This report is generated by artificial intelligence and should be used for informational purposes only.
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `MediSense-Report-${new Date(timestamp).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    setIsDownloading(false);
  };

  const formatReport = (text: string) => {
    return text.split('\n').map((paragraph, index) => (
      <p key={index} className="mb-3 leading-relaxed">
        {paragraph}
      </p>
    ));
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <Card className="bg-primary text-primary-foreground">
          <CardHeader>
            <CardTitle className="flex items-center gap-3 text-2xl">
              <User className="w-8 h-8" />
              Your Health Assessment Report
            </CardTitle>
            <div className="flex items-center gap-2 text-primary-foreground/80">
              <Clock className="w-4 h-4" />
              Generated on {new Date(timestamp).toLocaleString()}
            </div>
          </CardHeader>
        </Card>

        {/* Summary Card */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              Assessment Summary
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid md:grid-cols-3 gap-4">
              <div>
                <Label className="text-sm font-medium text-muted-foreground">Age</Label>
                <p className="text-lg font-semibold">{userInfo.age} years</p>
              </div>
              <div>
                <Label className="text-sm font-medium text-muted-foreground">Current Feeling</Label>
                <Badge className="mt-1 capitalize">{userInfo.feelings}</Badge>
              </div>
              <div>
                <Label className="text-sm font-medium text-muted-foreground">Symptoms Count</Label>
                <p className="text-lg font-semibold">{userInfo.symptoms.length} reported</p>
              </div>
            </div>
            
            <div>
              <Label className="text-sm font-medium text-muted-foreground">Reported Symptoms</Label>
              <div className="flex flex-wrap gap-2 mt-2">
                {userInfo.symptoms.map((symptom) => (
                  <Badge key={symptom} variant="outline">
                    {symptom}
                  </Badge>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* AI Report */}
        <Card>
          <CardHeader>
            <CardTitle>AI Health Assessment</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="prose prose-slate max-w-none">
              {formatReport(report)}
            </div>
          </CardContent>
        </Card>

        {/* Disclaimer */}
        <Alert className="border-destructive/50 bg-destructive/10">
          <AlertTriangle className="h-4 w-4 text-destructive" />
          <AlertDescription className="font-medium">
            <strong>Important Disclaimer:</strong> MediSense AI is not a substitute for professional medical advice. 
            Please consult a licensed healthcare provider for diagnosis and treatment. This assessment is for 
            informational purposes only and should not be used as the sole basis for medical decisions.
          </AlertDescription>
        </Alert>

        {/* Actions */}
        <div className="flex gap-4 justify-center">
          <Button 
            onClick={handleDownload} 
            disabled={isDownloading}
            className="bg-secondary hover:bg-secondary/90 text-secondary-foreground"
          >
            <Download className="w-4 h-4 mr-2" />
            {isDownloading ? 'Downloading...' : 'Download Report'}
          </Button>
          
          <Button variant="outline" onClick={onBackToHome}>
            <Home className="w-4 h-4 mr-2" />
            Back to Home
          </Button>
        </div>

        <Separator className="my-8" />

        {/* Store in Local Storage for History */}
        <div className="text-center text-sm text-muted-foreground">
          <p>This report has been saved to your browser's local storage for your reference.</p>
        </div>
      </div>
    </div>
  );
};

const Label = ({ className, children, ...props }: { className?: string; children: React.ReactNode }) => (
  <div className={`text-sm font-medium ${className}`} {...props}>
    {children}
  </div>
);